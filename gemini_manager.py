import google.generativeai as genai
from config import settings # Importamos la configuraci√≥n
import logging
import json

logger = logging.getLogger(__name__)

genai.configure(api_key=settings.GOOGLE_API_KEY)
model = genai.GenerativeModel('gemini-1.5-flash')

async def identificar_temas(texto_pregunta: str) -> list:
    logger.info("üß† IA identificando temas...")
    prompt = f"Analiza la pregunta: '{texto_pregunta}'. Devuelve una lista JSON con temas clave de esta lista: ['wifi', 'desayuno', 'pileta']. Si preguntan por internet o clave, el tema es 'wifi'."
    try:
        response = await model.generate_content_async(prompt)
        json_puro = response.text[response.text.find('['):response.text.rfind(']') + 1]
        temas = json.loads(json_puro)
        logger.info(f"‚úÖ Temas identificados por IA: {temas}")
        return temas
    except Exception as e:
        logger.error(f"üî¥ Error al identificar temas con IA: {e}")
        return []

async def formular_respuesta_final(pregunta: str, conocimiento: str) -> str:
    logger.info("ü§ñ IA formulando respuesta final...")
    prompt = f"Eres Alex, conserje. Responde amablemente la pregunta del hu√©sped usando esta informaci√≥n: \n{conocimiento if conocimiento else 'No se encontr√≥ informaci√≥n.'}\n\nPregunta: '{pregunta}'\n\nSi no tienes info, di que consultar√°s con recepci√≥n."
    try:
        response = await model.generate_content_async(prompt)
        logger.info("‚úÖ Respuesta final formulada.")
        return response.text.strip()
    except Exception as e:
        logger.error(f"üî¥ Error al formular respuesta con IA: {e}")
        return "Disculpe, estoy teniendo un problema t√©cnico para formular la respuesta."